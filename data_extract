import fnfqueue
from joblib import load
from pandas import DataFrame
from scapy.all import *
import sys

if len(sys.argv)<1:
    print("[Error] Incomplete line command.")
    print("------------------------------------")
    # print("Usage: {0} model_name".format(sys.argv[0]))
    # print("Available models: knn, rf, dt, lr, xgb, mlp, nb, svm")
else:
        queue = 1
        conn = fnfqueue.Connection()
        pkt_counter = 0
        mean_interarrival_time
        interarrival_time

        features = ['tcp.protocol', 'tcp.srcport', 'tcp.dstport','ip.src','ip.dst','pkt.len']

        try:
            q = conn.bind(queue)
            q.set_mode(0xffff, fnfqueue.COPY_PACKET)
        except PermissionError:
            print("Access denied; Do I have root rights or the needed capabilities?")
            sys.exit(-1)

        while True:
            try:
                for packet in conn:
                    pkt = []
                    pkt_counter += 1
                    l3 = IP(packet.payload)
                    l4 = TCP(packet.payload)

                    pkt.append(l4.proto) #l4_protocol
                    pkt.append(l4.sport) #tcp_source port
                    pkt.append(l4.dport) #tcp_destination port
                    pkt.append(l3.src) #IP Source Address
                    pkt.append(l3.dst) #IP Destination Address

                    #Tamanho em byte do payload: max, min, médio
                    pkt.append(len(packet.payload))  #Payload lenght


                    last_timestamp = curr_timestamp
                    curr_timestamp = packet.timestamp
                    if l4.seq == 1:
                        interarrival_time = curr_timestamp - last_timestamp
                        flow_start = l4.timestamp

                    print("packet:", pkt_counter)

                    #Extrair estatística de:
                    #Tamanho em byte do payload: max, min, médio
                    #Curr_timestamp ← timestamp
                    #Se for o primeiro pacote:
                    #Início do fluxo ← curr_timestamp
                    #last_timestamp ← curr_timestamp
                    #Interarrival_time ← curr_timestamp - last_timestamp
                    #Mean_interarrival_time ← (mean_interarrival_time + interarrival_time)/packet_counter

            except fnfqueue.BufferOverflowException:
                print("buffer error")

        conn.close()
        print("[Error] Wrong model name.")

